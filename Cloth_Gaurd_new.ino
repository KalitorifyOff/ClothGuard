#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/7472638b-b7d0-45de-a7fc-a7466c529b12

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String mode;
  CloudTemperatureSensor temp;
  String rain;
  CloudRelativeHumidity humi;
  bool servo;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP32Servo.h>
#include <DFRobot_DHT11.h>

Servo myservo;
DFRobot_DHT11 DHT;

#define DHT11_PIN 4
#define rainDigital 34
#define ldr 17
#define buzzer 5

#define led_1 26
#define led_2 27
#define led_3 14
#define led_4 12

#define button_1 2
#define button_2 35
#define button_3 32
#define button_4 33

int pos = 0;
int ldr_value;
int rainDigitalVal;

int button_1_state = 0;
int button_2_state = 0;
int button_3_state = 0;
int button_4_state = 0; 

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
      pinMode(rainDigital,INPUT);
    pinMode(ldr,INPUT);
      myservo.attach(15); 
    pinMode(led_1, OUTPUT);
    pinMode(button_1, INPUT_PULLUP);
    pinMode(led_2, OUTPUT);
    pinMode(button_2, INPUT_PULLUP);
    pinMode(led_3, OUTPUT);
    pinMode(button_3, INPUT_PULLUP);
    pinMode(led_4, OUTPUT);
    pinMode(button_4, INPUT_PULLUP);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here

   button_1_state = digitalRead(button_1);
  button_2_state = digitalRead(button_2);
  button_3_state = digitalRead(button_3);
  button_4_state = digitalRead(button_4);

if(button_1_state == LOW)
{
    digitalWrite(led_1, HIGH);
    digitalWrite(buzzer, HIGH); 
    delay(2000);
    digitalWrite(buzzer, LOW);
}

  
    DHT.read(DHT11_PIN);
  temp = DHT.temperature;
  humi = DHT.humidity;
  Serial.print("temp : "); Serial.println(temp);
  Serial.print("humi : ");Serial.println(humi);

  int rainDigitalVal = digitalRead(rainDigital);

  rain = digitalRead(rainDigital);
  if(rainDigitalVal)
  {
      myservo.write(180);  //delay time (servo rotating speed)
  }
  else
  {
    myservo.write(0);
  }

}


/*
  Since Servo is READ_WRITE variable, onServoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoChange()  {
  // Add your code here to act upon Servo change
  if(servo)
  {
    Serial.println("servo open");
    for(pos =1; pos <=180; pos += 1){ //you can change the possition(pos)value[pos=Servo rotating Degree]
      myservo.write(pos);
      delay(15);  //delay time (servo rotating speed)
    }
  }
  else
  {
    Serial.println("servo close");
    for(pos =180; pos <=1; pos -= 1){ //you can change the possition(pos)value[pos=Servo rotating Degree]
      myservo.write(pos);
      delay(15);  //delay time (servo rotating speed)
  }
}
}
